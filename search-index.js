var searchIndex = {};
searchIndex['cfg_ssa'] = {"items":[],"paths":[]};
searchIndex['cfg_dom'] = {"items":[],"paths":[]};
searchIndex['radeco_lib'] = {"items":[[0,"","radeco_lib","# The Radare2 Decompilation Library\nradeco-lib is the crate that powers the \n[radare2 decompiler](https://github.com/radare/radeco).",null,null],[0,"middle","","Components processing data in SSA form.",null,null],[0,"cfg","radeco_lib::middle","This module is used to convert the instructions generated from esil into\na CFG.",null,null],[3,"BasicBlock","radeco_lib::middle::cfg","",null,null],[12,"reachable","","",0,null],[12,"instructions","","",0,null],[12,"name","","",0,null],[3,"Direction","","",null,null],[3,"EdgeData","","",null,null],[12,"direction","","",1,null],[12,"edge_type","","",1,null],[3,"CFG","","",null,null],[12,"g","","",2,null],[12,"entry","","",2,null],[12,"exit","","",2,null],[12,"bbs","","",2,null],[4,"NodeData","","",null,null],[13,"Block","","",3,null],[13,"Entry","","",3,null],[13,"Exit","","",3,null],[4,"EdgeType","","",null,null],[13,"True","","",4,null],[13,"False","","",4,null],[13,"Unconditional","","",4,null],[17,"FORWARD","","",null,null],[17,"BACKWARD","","",null,null],[11,"clone","","",0,{"inputs":[{"name":"basicblock"}],"output":{"name":"basicblock"}}],[11,"fmt","","",0,{"inputs":[{"name":"basicblock"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"nodedata"}],"output":{"name":"nodedata"}}],[11,"fmt","","",3,{"inputs":[{"name":"nodedata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"edgetype"},{"name":"edgetype"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"edgetype"},{"name":"edgetype"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"edgetype"}],"output":{"name":"edgetype"}}],[11,"fmt","","",4,{"inputs":[{"name":"edgetype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"direction"},{"name":"direction"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"direction"},{"name":"direction"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"direction"}],"output":{"name":"direction"}}],[11,"fmt","","",5,{"inputs":[{"name":"direction"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"edgedata"}],"output":{"name":"edgedata"}}],[11,"fmt","","",1,{"inputs":[{"name":"edgedata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"cfg"}],"output":{"name":"cfg"}}],[11,"name","","",3,{"inputs":[{"name":"nodedata"}],"output":{"name":"string"}}],[11,"new","","",1,{"inputs":[{"name":"edgedata"},{"name":"direction"},{"name":"edgetype"},{"name":"address"},{"name":"address"}],"output":{"name":"edgedata"}}],[11,"new_forward_true","","",1,{"inputs":[{"name":"edgedata"},{"name":"address"},{"name":"address"}],"output":{"name":"edgedata"}}],[11,"new_forward_false","","",1,{"inputs":[{"name":"edgedata"},{"name":"address"},{"name":"address"}],"output":{"name":"edgedata"}}],[11,"new_backward_true","","",1,{"inputs":[{"name":"edgedata"},{"name":"address"},{"name":"address"}],"output":{"name":"edgedata"}}],[11,"new_backward_false","","",1,{"inputs":[{"name":"edgedata"},{"name":"address"},{"name":"address"}],"output":{"name":"edgedata"}}],[11,"new_forward_uncond","","",1,{"inputs":[{"name":"edgedata"},{"name":"address"},{"name":"address"}],"output":{"name":"edgedata"}}],[11,"new_backward_uncond","","",1,{"inputs":[{"name":"edgedata"},{"name":"address"},{"name":"address"}],"output":{"name":"edgedata"}}],[11,"new_true","","",1,{"inputs":[{"name":"edgedata"},{"name":"address"},{"name":"address"}],"output":{"name":"edgedata"}}],[11,"new_false","","",1,{"inputs":[{"name":"edgedata"},{"name":"address"},{"name":"address"}],"output":{"name":"edgedata"}}],[11,"new_uncond","","",1,{"inputs":[{"name":"edgedata"},{"name":"address"},{"name":"address"}],"output":{"name":"edgedata"}}],[11,"new","","",2,{"inputs":[{"name":"cfg"}],"output":{"name":"cfg"}}],[11,"assign_bbs","","",2,{"inputs":[{"name":"cfg"},{"name":"vec"}],"output":null}],[11,"build","","",2,{"inputs":[{"name":"cfg"},{"name":"vec"}],"output":null}],[11,"mark_reachable","","",2,{"inputs":[{"name":"cfg"}],"output":null}],[11,"add_new_block","","",2,{"inputs":[{"name":"cfg"}],"output":{"name":"nodeindex"}}],[11,"add_block","","",2,{"inputs":[{"name":"cfg"},{"name":"basicblock"}],"output":null}],[11,"get_block","","",2,{"inputs":[{"name":"cfg"},{"name":"nodeindex"}],"output":{"name":"nodedata"}}],[11,"add_edge","","",2,{"inputs":[{"name":"cfg"},{"name":"nodeindex"},{"name":"nodeindex"},{"name":"edgedata"}],"output":null}],[11,"configure","","",2,{"inputs":[{"name":"cfg"}],"output":{"name":"string"}}],[11,"nodes","","",2,{"inputs":[{"name":"cfg"}],"output":{"name":"vec"}}],[11,"edges","","",2,{"inputs":[{"name":"cfg"}],"output":{"name":"vec"}}],[11,"get_node","","",2,{"inputs":[{"name":"cfg"},{"name":"usize"}],"output":{"name":"option"}}],[11,"edge_source","","",2,{"inputs":[{"name":"cfg"},{"name":"edge"}],"output":{"name":"usize"}}],[11,"edge_target","","",2,{"inputs":[{"name":"cfg"},{"name":"edge"}],"output":{"name":"usize"}}],[11,"edge_attrs","","",2,{"inputs":[{"name":"cfg"},{"name":"edge"}],"output":{"name":"dotattrblock"}}],[11,"node_attrs","","",2,{"inputs":[{"name":"cfg"},{"name":"nodedata"}],"output":{"name":"dotattrblock"}}],[0,"dce","radeco_lib::middle","Dead code elimination",null,null],[5,"collect","radeco_lib::middle::dce","Removes SSA nodes that are not used by any other node.\nThe algorithm will not consider whether the uses keeping a node alive\nare in code that is actually executed or not. For a better analysis\nlook at `analysis::constant_propagation`.",null,{"inputs":[{"name":"t"}],"output":null}],[0,"display","radeco_lib::middle","Module to implement the display traits for the IR.",null,null],[0,"dot","","Graph visualization traits and functions to emit dot code.",null,null],[4,"DotAttrBlock","radeco_lib::middle::dot","Represents the contents of a GraphViz attribute block",null,null],[13,"Raw","","The attribute block as string including the surrounding square brackets.\nValues have to be escaped manually.",6,null],[13,"Attributes","","List of key-value pairs.\nValues will be escaped for you.",6,null],[5,"emit_dot","","",null,{"inputs":[{"name":"t"}],"output":{"name":"string"}}],[8,"GraphDot","","This trait enables graphs to be generated from implementors.",null,null],[16,"NodeType","","",7,null],[16,"EdgeType","","",7,null],[10,"configure","","",7,{"inputs":[{"name":"graphdot"}],"output":{"name":"string"}}],[10,"nodes","","",7,{"inputs":[{"name":"graphdot"}],"output":{"name":"vec"}}],[10,"edges","","",7,{"inputs":[{"name":"graphdot"}],"output":{"name":"vec"}}],[10,"get_node","","",7,{"inputs":[{"name":"graphdot"},{"name":"usize"}],"output":{"name":"option"}}],[11,"node_cluster","","Nodes with the same node_cluster return value will be put in the same graphviz-cluster.",7,{"inputs":[{"name":"graphdot"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"node_skip","","",7,{"inputs":[{"name":"graphdot"},{"name":"nodetype"}],"output":{"name":"bool"}}],[10,"node_attrs","","",7,{"inputs":[{"name":"graphdot"},{"name":"nodetype"}],"output":{"name":"dotattrblock"}}],[11,"edge_skip","","",7,{"inputs":[{"name":"graphdot"},{"name":"edgetype"}],"output":{"name":"bool"}}],[10,"edge_attrs","","",7,{"inputs":[{"name":"graphdot"},{"name":"edgetype"}],"output":{"name":"dotattrblock"}}],[10,"edge_source","","",7,{"inputs":[{"name":"graphdot"},{"name":"edgetype"}],"output":{"name":"usize"}}],[10,"edge_target","","",7,{"inputs":[{"name":"graphdot"},{"name":"edgetype"}],"output":{"name":"usize"}}],[0,"ir","radeco_lib::middle","Enumerations and structs to represent instructions.\nShared by the SSA representation and the intermediate representation of the ESIL parser.",null,null],[3,"MAddr","radeco_lib::middle::ir","",null,null],[12,"val","","",8,null],[3,"MRegInfo","","",null,null],[12,"reg_type","","",9,null],[12,"reg","","",9,null],[12,"size","","",9,null],[12,"alias","","",9,null],[12,"offset","","",9,null],[3,"MVal","","",null,null],[12,"name","","",10,null],[12,"size","","",10,null],[12,"val_type","","",10,null],[12,"reg_info","","",10,null],[12,"typeset","","",10,null],[12,"as_literal","","",10,null],[3,"MInst","","",null,null],[12,"addr","","",11,null],[12,"opcode","","",11,null],[12,"dst","","",11,null],[12,"operand_1","","",11,null],[12,"operand_2","","",11,null],[12,"update_flags","","",11,null],[4,"MArity","","",null,null],[13,"Zero","","",12,null],[13,"Unary","","",12,null],[13,"Binary","","",12,null],[13,"Ternary","","",12,null],[4,"MValType","","",null,null],[13,"Register","","",13,null],[13,"Temporary","","",13,null],[13,"Internal","","",13,null],[13,"EsilCur","","",13,null],[13,"EsilOld","","",13,null],[13,"Lastsz","","",13,null],[13,"Unknown","","",13,null],[13,"Null","","",13,null],[4,"MOpcode","","",null,null],[13,"OpAdd","","",14,null],[13,"OpSub","","",14,null],[13,"OpMul","","",14,null],[13,"OpDiv","","",14,null],[13,"OpMod","","",14,null],[13,"OpAnd","","",14,null],[13,"OpOr","","",14,null],[13,"OpXor","","",14,null],[13,"OpNot","","",14,null],[13,"OpEq","","",14,null],[13,"OpCmp","","",14,null],[13,"OpGt","","",14,null],[13,"OpLt","","",14,null],[13,"OpLteq","","",14,null],[13,"OpGteq","","",14,null],[13,"OpLsl","","",14,null],[13,"OpLsr","","",14,null],[13,"OpIf","","",14,null],[13,"OpJmp","","",14,null],[13,"OpCJmp","","",14,null],[13,"OpCall","","",14,null],[13,"OpLoad","","",14,null],[13,"OpStore","","",14,null],[13,"OpNarrow","","",14,null],[13,"OpWiden","","",14,null],[13,"OpConst","","",14,null],[13,"OpNop","","",14,null],[13,"OpInvalid","","",14,null],[13,"OpInc","","",14,null],[13,"OpDec","","",14,null],[13,"OpCl","","",14,null],[6,"Address","","",null,null],[6,"WidthSpec","","",null,null],[11,"default","","",8,{"inputs":[{"name":"maddr"}],"output":{"name":"maddr"}}],[11,"clone","","",8,{"inputs":[{"name":"maddr"}],"output":{"name":"maddr"}}],[11,"fmt","","",8,{"inputs":[{"name":"maddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"marity"},{"name":"marity"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"marity"},{"name":"marity"}],"output":{"name":"bool"}}],[11,"clone","","",12,{"inputs":[{"name":"marity"}],"output":{"name":"marity"}}],[11,"fmt","","",12,{"inputs":[{"name":"marity"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"mvaltype"},{"name":"mvaltype"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"mvaltype"},{"name":"mvaltype"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"mvaltype"}],"output":{"name":"mvaltype"}}],[11,"fmt","","",13,{"inputs":[{"name":"mvaltype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"mopcode"},{"name":"mopcode"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"mopcode"},{"name":"mopcode"}],"output":{"name":"bool"}}],[11,"clone","","",14,{"inputs":[{"name":"mopcode"}],"output":{"name":"mopcode"}}],[11,"fmt","","",14,{"inputs":[{"name":"mopcode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",9,{"inputs":[{"name":"mreginfo"}],"output":{"name":"mreginfo"}}],[11,"clone","","",9,{"inputs":[{"name":"mreginfo"}],"output":{"name":"mreginfo"}}],[11,"fmt","","",9,{"inputs":[{"name":"mreginfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"mval"}],"output":{"name":"mval"}}],[11,"fmt","","",10,{"inputs":[{"name":"mval"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",10,{"inputs":[{"name":"mval"}],"output":{"name":"self"}}],[11,"clone","","",11,{"inputs":[{"name":"minst"}],"output":{"name":"minst"}}],[11,"fmt","","",11,{"inputs":[{"name":"minst"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_inst","","",14,{"inputs":[{"name":"mopcode"},{"name":"mval"},{"name":"mval"},{"name":"mval"},{"name":"option"}],"output":{"name":"minst"}}],[11,"is_binary","","",14,{"inputs":[{"name":"mopcode"}],"output":{"name":"bool"}}],[11,"is_unary","","",14,{"inputs":[{"name":"mopcode"}],"output":{"name":"bool"}}],[11,"arity","","",14,{"inputs":[{"name":"mopcode"}],"output":{"name":"marity"}}],[11,"to_string","","",14,{"inputs":[{"name":"mopcode"}],"output":{"name":"string"}}],[11,"has_sideeffects","","",14,{"inputs":[{"name":"mopcode"}],"output":{"name":"bool"}}],[11,"allowed_in_ssa","","",14,{"inputs":[{"name":"mopcode"}],"output":{"name":"bool"}}],[11,"new","","",9,{"inputs":[{"name":"mreginfo"}],"output":{"name":"mreginfo"}}],[11,"new","","",10,{"inputs":[{"name":"mval"},{"name":"string"},{"name":"widthspec"},{"name":"mvaltype"},{"name":"u32"},{"name":"option"}],"output":{"name":"mval"}}],[11,"null","","",10,{"inputs":[{"name":"mval"}],"output":{"name":"mval"}}],[11,"tmp","","",10,{"inputs":[{"name":"mval"},{"name":"u64"},{"name":"widthspec"}],"output":{"name":"mval"}}],[11,"esilcur","","",10,{"inputs":[{"name":"mval"}],"output":{"name":"mval"}}],[11,"esilold","","",10,{"inputs":[{"name":"mval"}],"output":{"name":"mval"}}],[11,"esillastsz","","",10,{"inputs":[{"name":"mval"}],"output":{"name":"mval"}}],[11,"new","","",11,{"inputs":[{"name":"minst"},{"name":"mopcode"},{"name":"mval"},{"name":"mval"},{"name":"mval"},{"name":"option"}],"output":{"name":"minst"}}],[11,"new","","",8,{"inputs":[{"name":"maddr"},{"name":"u64"}],"output":{"name":"maddr"}}],[0,"phiplacement","radeco_lib::middle","Implements the SSA construction algorithm described in\n\"Simple and Efficient Construction of Static Single Assignment Form\"",null,null],[3,"PhiPlacer","radeco_lib::middle::phiplacement","",null,null],[12,"ssa","","",15,null],[12,"variable_types","","",15,null],[6,"VarId","","",null,null],[11,"new","","",15,{"inputs":[{"name":"phiplacer"},{"name":"t"}],"output":{"name":"phiplacer"}}],[11,"add_variables","","",15,{"inputs":[{"name":"phiplacer"},{"name":"vec"}],"output":null}],[11,"write_variable","","",15,{"inputs":[{"name":"phiplacer"},{"name":"actionref"},{"name":"varid"},{"name":"valueref"}],"output":null}],[11,"read_variable","","",15,{"inputs":[{"name":"phiplacer"},{"name":"actionref"},{"name":"varid"}],"output":{"name":"valueref"}}],[11,"add_block","","",15,{"inputs":[{"name":"phiplacer"},{"name":"bbinfo"}],"output":{"name":"actionref"}}],[11,"seal_block","","",15,{"inputs":[{"name":"phiplacer"},{"name":"actionref"}],"output":null}],[11,"add_dynamic","","",15,{"inputs":[{"name":"phiplacer"}],"output":{"name":"actionref"}}],[11,"sync_register_state","","",15,{"inputs":[{"name":"phiplacer"},{"name":"actionref"}],"output":null}],[0,"regfile","radeco_lib::middle","Contains the struct `SubRegisterFile` which extends `PhiPlacer`s\nfunctionality by reads and writes to partial registers.",null,null],[3,"SubRegisterFile","radeco_lib::middle::regfile","A structure containing information about whole and partial registers of a platform.\nUpon creation it builds a vector of `ValueType`s representing whole registers\nto be added to a PhiPlacer.",null,null],[12,"whole_registers","","`ValueType`s of whole registers ready to be added to a PhiPlacer.\nThe index within PhiPlacer to the first register is needed\nas argument `base` to `read_register` and `write_register` later.",16,null],[12,"whole_names","","Contains the respective names for the registers described in `whole_registers`",16,null],[11,"new","","Creates a new SubRegisterFile based on a provided register profile.",16,{"inputs":[{"name":"subregisterfile"},{"name":"lreginfo"}],"output":{"name":"subregisterfile"}}],[11,"write_register","","Emit code for setting the specified register to the specified value.\nWill automatically insert code for shifting and masking in case of subregisters.\nThis implies that it also tries to read the old value of the whole register.",16,{"inputs":[{"name":"subregisterfile"},{"name":"phiplacer"},{"name":"usize"},{"name":"actionref"},{"name":"string"},{"name":"valueref"}],"output":null}],[11,"read_register","","Emit code for reading the current value of the specified register.",16,{"inputs":[{"name":"subregisterfile"},{"name":"phiplacer"},{"name":"usize"},{"name":"actionref"},{"name":"string"}],"output":{"name":"valueref"}}],[0,"ssa","radeco_lib::middle","Holds traits and structs for the ssa form",null,null],[0,"cfg_traits","radeco_lib::middle::ssa","Defines the traits to be implemented by the Control Flow Graph (CFG).",null,null],[8,"CFG","radeco_lib::middle::ssa::cfg_traits","Provides __accessors__ to the underlying storage",null,null],[16,"ActionRef","","",17,null],[16,"CFEdgeRef","","",17,null],[10,"blocks","","Reference to all blocks in the CFG",17,{"inputs":[{"name":"cfg"}],"output":{"name":"vec"}}],[10,"start_node","","Reference to entry block of the CFG",17,{"inputs":[{"name":"cfg"}],"output":{"name":"actionref"}}],[10,"exit_node","","Reference to exit block of the CFG",17,{"inputs":[{"name":"cfg"}],"output":{"name":"actionref"}}],[10,"get_unconditional","","Reference to the next block in the natural flow of the CFG",17,{"inputs":[{"name":"cfg"},{"name":"actionref"}],"output":{"name":"actionref"}}],[10,"preds_of","","Reference to immediate predecessors of block",17,{"inputs":[{"name":"cfg"},{"name":"actionref"}],"output":{"name":"vec"}}],[10,"succs_of","","Reference to immediate successors of block",17,{"inputs":[{"name":"cfg"},{"name":"actionref"}],"output":{"name":"vec"}}],[10,"invalid_action","","Reference that represents and Invalid block",17,{"inputs":[{"name":"cfg"}],"output":{"name":"actionref"}}],[10,"edges_of","","Reference to all outgoing edges from a block",17,{"inputs":[{"name":"cfg"},{"name":"actionref"}],"output":{"name":"vec"}}],[10,"incoming_edges","","Reference to all the incoming edges to a block",17,{"inputs":[{"name":"cfg"},{"name":"actionref"}],"output":{"name":"vec"}}],[10,"info","","Returns (source_block, target_block) for an edge",17,null],[11,"source_of","","Reference to the source block for the edge",17,{"inputs":[{"name":"cfg"},{"name":"cfedgeref"}],"output":{"name":"actionref"}}],[11,"target_of","","Reference to the target block for the edge",17,{"inputs":[{"name":"cfg"},{"name":"cfedgeref"}],"output":{"name":"actionref"}}],[10,"find_edge","","Reference to the edge that connects the source to the target.",17,{"inputs":[{"name":"cfg"},{"name":"actionref"},{"name":"actionref"}],"output":{"name":"cfedgeref"}}],[10,"true_edge_of","","Reference to the true edge",17,{"inputs":[{"name":"cfg"},{"name":"actionref"}],"output":{"name":"cfedgeref"}}],[10,"false_edge_of","","Reference to the false edge",17,{"inputs":[{"name":"cfg"},{"name":"actionref"}],"output":{"name":"cfedgeref"}}],[10,"next_edge_of","","Reference to the unconditional edge that flows out of the block",17,{"inputs":[{"name":"cfg"},{"name":"actionref"}],"output":{"name":"cfedgeref"}}],[10,"invalid_edge","","Reference that represents an Invalid control flow edge.",17,{"inputs":[{"name":"cfg"}],"output":{"name":"cfedgeref"}}],[8,"CFGMod","","Provides __mutators__ to the underlying storage",null,null],[16,"BBInfo","","",18,null],[10,"mark_start_node","","Mark the start node for the SSA graph",18,{"inputs":[{"name":"cfgmod"},{"name":"actionref"}],"output":null}],[10,"mark_exit_node","","Mark the exit node for the SSA graph",18,{"inputs":[{"name":"cfgmod"},{"name":"actionref"}],"output":null}],[10,"add_block","","Add a new basic block",18,{"inputs":[{"name":"cfgmod"},{"name":"bbinfo"}],"output":{"name":"actionref"}}],[10,"add_dynamic","","Add a new exit",18,{"inputs":[{"name":"cfgmod"}],"output":{"name":"actionref"}}],[10,"add_control_edge","","Add a control edge between to basic blocks",18,{"inputs":[{"name":"cfgmod"},{"name":"actionref"},{"name":"actionref"},{"name":"u8"}],"output":null}],[10,"remove_block","","Will remove a block and all its associated data from the graph",18,{"inputs":[{"name":"cfgmod"},{"name":"actionref"}],"output":null}],[0,"ssa_traits","radeco_lib::middle::ssa","Module that holds the struct and trait implementations for the ssa form.",null,null],[3,"BBInfo","radeco_lib::middle::ssa::ssa_traits","",null,null],[12,"addr","","",19,null],[3,"NodeData","","",null,null],[12,"vt","","",20,null],[12,"nt","","",20,null],[4,"ValueType","","",null,null],[13,"Integer","","",21,null],[12,"width","radeco_lib::middle::ssa::ssa_traits::ValueType","",21,null],[4,"NodeType","radeco_lib::middle::ssa::ssa_traits","",null,null],[13,"Op","","",22,null],[13,"Phi","","",22,null],[13,"Undefined","","",22,null],[8,"SSA","","Trait for the SSA Form implementation.",null,null],[16,"ValueRef","","",23,null],[10,"exprs_in","","Get all the NodeIndex of all operations/expressions in the BasicBlock with index 'i'.",23,{"inputs":[{"name":"ssa"},{"name":"actionref"}],"output":{"name":"vec"}}],[10,"is_expr","","Check if the node at the given index is a expression or not.",23,{"inputs":[{"name":"ssa"},{"name":"valueref"}],"output":{"name":"bool"}}],[10,"get_phis","","Get all phis in the BasicBlock with index 'i'.",23,{"inputs":[{"name":"ssa"},{"name":"actionref"}],"output":{"name":"vec"}}],[10,"get_uses","","Get all the uses of the node with index 'i'.",23,{"inputs":[{"name":"ssa"},{"name":"valueref"}],"output":{"name":"vec"}}],[10,"get_block","","Get the NodeIndex of the BasicBlock to which node with index 'i' belongs to.",23,{"inputs":[{"name":"ssa"},{"name":"valueref"}],"output":{"name":"actionref"}}],[10,"get_operands","","Get the operands for the operation with NodeIndex 'i'.",23,{"inputs":[{"name":"ssa"},{"name":"valueref"}],"output":{"name":"vec"}}],[10,"get_sparse_operands","","Get the operands for the operation with NodeIndex 'i' as tuples.",23,{"inputs":[{"name":"ssa"},{"name":"valueref"}],"output":{"name":"vec"}}],[11,"lhs","","Get the lhs() of the Operation with NodeIndex 'i'.",23,{"inputs":[{"name":"ssa"},{"name":"valueref"}],"output":{"name":"valueref"}}],[11,"rhs","","Get the rhs() of the Operation with NodeIndex 'i'.",23,{"inputs":[{"name":"ssa"},{"name":"valueref"}],"output":{"name":"valueref"}}],[10,"get_node_data","","Get the actual NodeData.",23,{"inputs":[{"name":"ssa"},{"name":"valueref"}],"output":{"name":"result"}}],[10,"is_selector","","Returns true if the expression acts as a `Selector` for control flow.",23,{"inputs":[{"name":"ssa"},{"name":"valueref"}],"output":{"name":"bool"}}],[10,"selector_of","","Returns the selector for the Block.",23,{"inputs":[{"name":"ssa"},{"name":"actionref"}],"output":{"name":"option"}}],[10,"selects_for","","Get the Block for which i acts as a selector.",23,{"inputs":[{"name":"ssa"},{"name":"valueref"}],"output":{"name":"actionref"}}],[10,"get_target","","Get Jump target of a call or an unconditional jump.",23,{"inputs":[{"name":"ssa"},{"name":"valueref"}],"output":{"name":"actionref"}}],[10,"get_branches","","Get branches of a selector (false_branch, true_branch).",23,null],[10,"get_true_branch","","Helper method that gets only the true branch.",23,{"inputs":[{"name":"ssa"},{"name":"valueref"}],"output":{"name":"actionref"}}],[10,"get_false_branch","","Helper method that gets only the false branch.",23,{"inputs":[{"name":"ssa"},{"name":"valueref"}],"output":{"name":"actionref"}}],[10,"args_of","","Gets the data dependencies of a value node in any order.\n(See get_operands for ordered return value)",23,{"inputs":[{"name":"ssa"},{"name":"valueref"}],"output":{"name":"vec"}}],[10,"uses_of","","Gets uses dependents of a value node.\n(Equivalent as `SSAMod::get_uses`)",23,{"inputs":[{"name":"ssa"},{"name":"valueref"}],"output":{"name":"vec"}}],[11,"block_of","","Get the NodeIndex of the BasicBlock to which node with index 'i' belongs to.\n(Alias for get_block)",23,{"inputs":[{"name":"ssa"},{"name":"valueref"}],"output":{"name":"actionref"}}],[10,"registers_at","","Get a node that has all register values at the beginning of the specified basic block as args",23,{"inputs":[{"name":"ssa"},{"name":"actionref"}],"output":{"name":"valueref"}}],[10,"refresh","","Updates a node reference to the latest version in case of replacement",23,{"inputs":[{"name":"ssa"},{"name":"valueref"}],"output":{"name":"valueref"}}],[10,"invalid_value","","",23,{"inputs":[{"name":"ssa"}],"output":{"name":"valueref"}}],[10,"to_value","","",23,{"inputs":[{"name":"ssa"},{"name":"actionref"}],"output":{"name":"valueref"}}],[10,"to_action","","",23,{"inputs":[{"name":"ssa"},{"name":"valueref"}],"output":{"name":"actionref"}}],[10,"node_count","","",23,{"inputs":[{"name":"ssa"}],"output":{"name":"usize"}}],[10,"edge_count","","",23,{"inputs":[{"name":"ssa"}],"output":{"name":"usize"}}],[8,"SSAMod","","Trait for modifying SSA data",null,null],[10,"add_op","","Add a new operation node.",24,{"inputs":[{"name":"ssamod"},{"name":"actionref"},{"name":"mopcode"},{"name":"valuetype"}],"output":{"name":"valueref"}}],[10,"add_const","","Add a new constant node.",24,{"inputs":[{"name":"ssamod"},{"name":"actionref"},{"name":"u64"}],"output":{"name":"valueref"}}],[10,"add_phi","","Add a new phi node.",24,{"inputs":[{"name":"ssamod"},{"name":"actionref"},{"name":"valuetype"}],"output":{"name":"valueref"}}],[10,"add_undefined","","Add a new undefined node",24,{"inputs":[{"name":"ssamod"},{"name":"actionref"},{"name":"valuetype"}],"output":{"name":"valueref"}}],[10,"add_comment","","Add a new comment node",24,{"inputs":[{"name":"ssamod"},{"name":"actionref"},{"name":"valuetype"},{"name":"string"}],"output":{"name":"valueref"}}],[10,"mark_selector","","Mark the node as selector for the control edges away from the specified basic block",24,{"inputs":[{"name":"ssamod"},{"name":"valueref"},{"name":"actionref"}],"output":null}],[10,"phi_use","","Add a data source to a phi node.",24,{"inputs":[{"name":"ssamod"},{"name":"valueref"},{"name":"valueref"}],"output":null}],[10,"phi_unuse","","Remove a data source from a phi node.",24,{"inputs":[{"name":"ssamod"},{"name":"valueref"},{"name":"valueref"}],"output":null}],[10,"op_use","","Set the index-th argument of the node.",24,{"inputs":[{"name":"ssamod"},{"name":"valueref"},{"name":"u8"},{"name":"valueref"}],"output":null}],[10,"replace","","Replace one node by another within one basic block.",24,{"inputs":[{"name":"ssamod"},{"name":"valueref"},{"name":"valueref"}],"output":null}],[10,"remove","","Remove a node without replacement",24,{"inputs":[{"name":"ssamod"},{"name":"valueref"}],"output":null}],[10,"cleanup","","Perform a cleanup. (Will invalidate indices)",24,{"inputs":[{"name":"ssamod"}],"output":null}],[10,"remove_edge","","Remove  conrtol flow edge. This is a part of SSAMod as this potentially modifies the ssa.",24,{"inputs":[{"name":"ssamod"},{"name":"cfedgeref"}],"output":null}],[11,"eq","","",21,{"inputs":[{"name":"valuetype"},{"name":"valuetype"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"valuetype"},{"name":"valuetype"}],"output":{"name":"bool"}}],[11,"fmt","","",21,{"inputs":[{"name":"valuetype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"valuetype"}],"output":{"name":"valuetype"}}],[11,"from","","",21,{"inputs":[{"name":"valuetype"},{"name":"str"}],"output":{"name":"valuetype"}}],[11,"from","","",21,{"inputs":[{"name":"valuetype"},{"name":"string"}],"output":{"name":"valuetype"}}],[11,"from","","",21,{"inputs":[{"name":"valuetype"},{"name":"u16"}],"output":{"name":"valuetype"}}],[11,"from","","",21,{"inputs":[{"name":"valuetype"},{"name":"usize"}],"output":{"name":"valuetype"}}],[11,"fmt","","",19,{"inputs":[{"name":"bbinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"bbinfo"}],"output":{"name":"bbinfo"}}],[11,"fmt","","",22,{"inputs":[{"name":"nodetype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"nodetype"}],"output":{"name":"nodetype"}}],[11,"fmt","","",20,{"inputs":[{"name":"nodedata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"nodedata"}],"output":{"name":"nodedata"}}],[0,"ssastorage","radeco_lib::middle::ssa","",null,null],[3,"SSAStorage","radeco_lib::middle::ssa::ssastorage","",null,null],[12,"g","","",25,null],[12,"start_node","","",25,null],[12,"exit_node","","",25,null],[12,"stable_indexing","","",25,null],[4,"NodeData","","",null,null],[13,"Op","","",26,null],[13,"Phi","","",26,null],[13,"Comment","","",26,null],[13,"Undefined","","",26,null],[13,"Removed","","",26,null],[13,"Unreachable","","",26,null],[13,"BasicBlock","","",26,null],[13,"DynamicAction","","",26,null],[13,"RegisterState","","",26,null],[4,"EdgeData","","",null,null],[13,"Control","","",27,null],[13,"Data","","",27,null],[13,"ContainedInBB","","",27,null],[13,"Selector","","",27,null],[13,"RegisterState","","",27,null],[13,"ReplacedBy","","",27,null],[11,"fmt","","",26,{"inputs":[{"name":"nodedata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"nodedata"}],"output":{"name":"nodedata"}}],[11,"fmt","","",27,{"inputs":[{"name":"edgedata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"edgedata"}],"output":{"name":"edgedata"}}],[11,"clone","","",25,{"inputs":[{"name":"ssastorage"}],"output":{"name":"ssastorage"}}],[11,"fmt","","",25,{"inputs":[{"name":"ssastorage"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",25,{"inputs":[{"name":"ssastorage"}],"output":{"name":"ssastorage"}}],[11,"read_const","","",25,{"inputs":[{"name":"ssastorage"},{"name":"nodeindex"}],"output":{"name":"option"}}],[11,"args_of_ordered","","",25,{"inputs":[{"name":"ssastorage"},{"name":"nodeindex"}],"output":{"name":"vec"}}],[11,"replaced_by","","",25,{"inputs":[{"name":"ssastorage"},{"name":"nodeindex"}],"output":{"name":"nodeindex"}}],[11,"is_block","","",25,{"inputs":[{"name":"ssastorage"},{"name":"nodeindex"}],"output":{"name":"bool"}}],[11,"is_action","","",25,{"inputs":[{"name":"ssastorage"},{"name":"nodeindex"}],"output":{"name":"bool"}}],[11,"remove_with_spacer","","",25,{"inputs":[{"name":"ssastorage"},{"name":"nodeindex"},{"name":"nodedata"}],"output":null}],[11,"blocks","","",25,{"inputs":[{"name":"ssastorage"}],"output":{"name":"vec"}}],[11,"start_node","","",25,{"inputs":[{"name":"ssastorage"}],"output":{"name":"nodeindex"}}],[11,"exit_node","","",25,{"inputs":[{"name":"ssastorage"}],"output":{"name":"nodeindex"}}],[11,"get_unconditional","","",25,{"inputs":[{"name":"ssastorage"},{"name":"actionref"}],"output":{"name":"actionref"}}],[11,"preds_of","","",25,{"inputs":[{"name":"ssastorage"},{"name":"nodeindex"}],"output":{"name":"vec"}}],[11,"succs_of","","",25,{"inputs":[{"name":"ssastorage"},{"name":"nodeindex"}],"output":{"name":"vec"}}],[11,"invalid_action","","",25,{"inputs":[{"name":"ssastorage"}],"output":{"name":"nodeindex"}}],[11,"edges_of","","",25,{"inputs":[{"name":"ssastorage"},{"name":"nodeindex"}],"output":{"name":"vec"}}],[11,"info","","",25,null],[11,"find_edge","","",25,{"inputs":[{"name":"ssastorage"},{"name":"nodeindex"},{"name":"nodeindex"}],"output":{"name":"edgeindex"}}],[11,"true_edge_of","","",25,{"inputs":[{"name":"ssastorage"},{"name":"nodeindex"}],"output":{"name":"edgeindex"}}],[11,"false_edge_of","","",25,{"inputs":[{"name":"ssastorage"},{"name":"nodeindex"}],"output":{"name":"edgeindex"}}],[11,"next_edge_of","","",25,{"inputs":[{"name":"ssastorage"},{"name":"nodeindex"}],"output":{"name":"edgeindex"}}],[11,"incoming_edges","","",25,{"inputs":[{"name":"ssastorage"},{"name":"nodeindex"}],"output":{"name":"vec"}}],[11,"invalid_edge","","",25,{"inputs":[{"name":"ssastorage"}],"output":{"name":"edgeindex"}}],[11,"mark_start_node","","",25,{"inputs":[{"name":"ssastorage"},{"name":"actionref"}],"output":null}],[11,"mark_exit_node","","",25,{"inputs":[{"name":"ssastorage"},{"name":"actionref"}],"output":null}],[11,"add_block","","",25,{"inputs":[{"name":"ssastorage"},{"name":"bbinfo"}],"output":{"name":"nodeindex"}}],[11,"add_dynamic","","",25,{"inputs":[{"name":"ssastorage"}],"output":{"name":"nodeindex"}}],[11,"add_control_edge","","",25,{"inputs":[{"name":"ssastorage"},{"name":"actionref"},{"name":"actionref"},{"name":"u8"}],"output":null}],[11,"remove_block","","",25,{"inputs":[{"name":"ssastorage"},{"name":"actionref"}],"output":null}],[11,"exprs_in","","",25,{"inputs":[{"name":"ssastorage"},{"name":"nodeindex"}],"output":{"name":"vec"}}],[11,"is_expr","","",25,{"inputs":[{"name":"ssastorage"},{"name":"nodeindex"}],"output":{"name":"bool"}}],[11,"get_phis","","",25,{"inputs":[{"name":"ssastorage"},{"name":"nodeindex"}],"output":{"name":"vec"}}],[11,"get_uses","","",25,{"inputs":[{"name":"ssastorage"},{"name":"nodeindex"}],"output":{"name":"vec"}}],[11,"get_block","","",25,{"inputs":[{"name":"ssastorage"},{"name":"nodeindex"}],"output":{"name":"nodeindex"}}],[11,"selects_for","","",25,{"inputs":[{"name":"ssastorage"},{"name":"nodeindex"}],"output":{"name":"nodeindex"}}],[11,"get_branches","","",25,null],[11,"get_true_branch","","",25,{"inputs":[{"name":"ssastorage"},{"name":"nodeindex"}],"output":{"name":"nodeindex"}}],[11,"get_false_branch","","",25,{"inputs":[{"name":"ssastorage"},{"name":"nodeindex"}],"output":{"name":"nodeindex"}}],[11,"registers_at","","",25,{"inputs":[{"name":"ssastorage"},{"name":"nodeindex"}],"output":{"name":"nodeindex"}}],[11,"get_operands","","",25,{"inputs":[{"name":"ssastorage"},{"name":"nodeindex"}],"output":{"name":"vec"}}],[11,"get_sparse_operands","","",25,{"inputs":[{"name":"ssastorage"},{"name":"nodeindex"}],"output":{"name":"vec"}}],[11,"get_node_data","","",25,{"inputs":[{"name":"ssastorage"},{"name":"nodeindex"}],"output":{"name":"result"}}],[11,"is_selector","","",25,{"inputs":[{"name":"ssastorage"},{"name":"valueref"}],"output":{"name":"bool"}}],[11,"selector_of","","",25,{"inputs":[{"name":"ssastorage"},{"name":"actionref"}],"output":{"name":"option"}}],[11,"get_target","","",25,{"inputs":[{"name":"ssastorage"},{"name":"nodeindex"}],"output":{"name":"nodeindex"}}],[11,"args_of","","",25,{"inputs":[{"name":"ssastorage"},{"name":"nodeindex"}],"output":{"name":"vec"}}],[11,"uses_of","","",25,{"inputs":[{"name":"ssastorage"},{"name":"nodeindex"}],"output":{"name":"vec"}}],[11,"refresh","","",25,{"inputs":[{"name":"ssastorage"},{"name":"nodeindex"}],"output":{"name":"nodeindex"}}],[11,"invalid_value","","",25,{"inputs":[{"name":"ssastorage"}],"output":{"name":"nodeindex"}}],[11,"to_value","","",25,{"inputs":[{"name":"ssastorage"},{"name":"nodeindex"}],"output":{"name":"nodeindex"}}],[11,"to_action","","",25,{"inputs":[{"name":"ssastorage"},{"name":"nodeindex"}],"output":{"name":"nodeindex"}}],[11,"node_count","","",25,{"inputs":[{"name":"ssastorage"}],"output":{"name":"usize"}}],[11,"edge_count","","",25,{"inputs":[{"name":"ssastorage"}],"output":{"name":"usize"}}],[11,"add_op","","",25,{"inputs":[{"name":"ssastorage"},{"name":"nodeindex"},{"name":"mopcode"},{"name":"valuetype"}],"output":{"name":"nodeindex"}}],[11,"add_const","","",25,{"inputs":[{"name":"ssastorage"},{"name":"nodeindex"},{"name":"u64"}],"output":{"name":"nodeindex"}}],[11,"add_phi","","",25,{"inputs":[{"name":"ssastorage"},{"name":"nodeindex"},{"name":"valuetype"}],"output":{"name":"nodeindex"}}],[11,"add_undefined","","",25,{"inputs":[{"name":"ssastorage"},{"name":"nodeindex"},{"name":"valuetype"}],"output":{"name":"nodeindex"}}],[11,"add_comment","","",25,{"inputs":[{"name":"ssastorage"},{"name":"nodeindex"},{"name":"valuetype"},{"name":"string"}],"output":{"name":"nodeindex"}}],[11,"mark_selector","","",25,{"inputs":[{"name":"ssastorage"},{"name":"valueref"},{"name":"actionref"}],"output":null}],[11,"phi_use","","",25,{"inputs":[{"name":"ssastorage"},{"name":"nodeindex"},{"name":"nodeindex"}],"output":null}],[11,"phi_unuse","","",25,{"inputs":[{"name":"ssastorage"},{"name":"nodeindex"},{"name":"nodeindex"}],"output":null}],[11,"op_use","","",25,{"inputs":[{"name":"ssastorage"},{"name":"nodeindex"},{"name":"u8"},{"name":"nodeindex"}],"output":null}],[11,"replace","","",25,{"inputs":[{"name":"ssastorage"},{"name":"nodeindex"},{"name":"nodeindex"}],"output":null}],[11,"remove","","",25,{"inputs":[{"name":"ssastorage"},{"name":"nodeindex"}],"output":null}],[11,"cleanup","","",25,{"inputs":[{"name":"ssastorage"}],"output":null}],[11,"remove_edge","","",25,{"inputs":[{"name":"ssastorage"},{"name":"cfedgeref"}],"output":null}],[0,"ssadot","radeco_lib::middle::ssa","",null,null],[11,"configure","radeco_lib::middle::ssa::ssastorage","",25,{"inputs":[{"name":"ssastorage"}],"output":{"name":"string"}}],[11,"nodes","","",25,{"inputs":[{"name":"ssastorage"}],"output":{"name":"vec"}}],[11,"edges","","",25,{"inputs":[{"name":"ssastorage"}],"output":{"name":"vec"}}],[11,"get_node","","",25,{"inputs":[{"name":"ssastorage"},{"name":"usize"}],"output":{"name":"option"}}],[11,"node_cluster","","",25,{"inputs":[{"name":"ssastorage"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"edge_source","","",25,{"inputs":[{"name":"ssastorage"},{"name":"edge"}],"output":{"name":"usize"}}],[11,"edge_target","","",25,{"inputs":[{"name":"ssastorage"},{"name":"edge"}],"output":{"name":"usize"}}],[11,"edge_skip","","",25,{"inputs":[{"name":"ssastorage"},{"name":"edge"}],"output":{"name":"bool"}}],[11,"edge_attrs","","",25,{"inputs":[{"name":"ssastorage"},{"name":"edge"}],"output":{"name":"dotattrblock"}}],[11,"node_attrs","","",25,{"inputs":[{"name":"ssastorage"},{"name":"nodedata"}],"output":{"name":"dotattrblock"}}],[0,"verifier","radeco_lib::middle::ssa","Implements a pass that goes over the ssa and checks if the ssa is still valid.",null,null],[5,"verify","radeco_lib::middle::ssa::verifier","",null,{"inputs":[{"name":"t"}],"output":{"name":"vresult"}}],[6,"VResult","","",null,null],[8,"Verify","","",null,null],[10,"verify_block","","",28,{"inputs":[{"name":"verify"},{"name":"actionref"}],"output":{"name":"vresult"}}],[10,"verify_expr","","",28,{"inputs":[{"name":"verify"},{"name":"valueref"}],"output":{"name":"vresult"}}],[8,"VerifiedAdd","","",null,null],[10,"verified_add_op","","",29,null],[11,"verify_block","radeco_lib::middle::ssa::ssastorage","",25,{"inputs":[{"name":"ssastorage"},{"name":"nodeindex"}],"output":{"name":"vresult"}}],[11,"verify_expr","","",25,{"inputs":[{"name":"ssastorage"},{"name":"nodeindex"}],"output":{"name":"vresult"}}],[0,"error","radeco_lib::middle::ssa","",null,null],[4,"SSAErr","radeco_lib::middle::ssa::error","",null,null],[13,"InvalidBlock","","",30,null],[13,"InvalidType","","",30,null],[13,"InvalidTarget","","",30,null],[13,"InvalidControl","","",30,null],[13,"WrongNumOperands","","",30,null],[13,"WrongNumEdges","","",30,null],[13,"NoSelector","","",30,null],[13,"UnexpectedSelector","","",30,null],[13,"UnreachableBlock","","",30,null],[13,"InvalidExpr","","",30,null],[13,"IncompatibleWidth","","",30,null],[11,"fmt","","",30,{"inputs":[{"name":"ssaerr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"ssaerr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",30,{"inputs":[{"name":"ssaerr"}],"output":{"name":"str"}}],[11,"cause","","",30,{"inputs":[{"name":"ssaerr"}],"output":{"name":"option"}}],[0,"analysis","radeco_lib","Module that implements analysis and optimizations on radeco IR.",null,null],[0,"valueset","radeco_lib::analysis","This module offers traits for valuesets and implementations for valuesets of 64 bit integers\nusing different compact representations, including methods for intersection and union.\n(Currently unused)",null,null],[3,"KnownBits","radeco_lib::analysis::valueset","Value set of u64 integers with certain bits set/cleared.",null,null],[12,"zerobits","","Bits that are cleared",31,null],[12,"onebits","","Bits that are set",31,null],[3,"UIntMultiple","","Value set of unsigned values that satisfy value % modulus = residue.",null,null],[12,"modulus","","",32,null],[12,"residue","","",32,null],[3,"UIntRange","","Value set of unsigned values between min and max.",null,null],[12,"min","","",33,null],[12,"max","","",33,null],[3,"SIntRange","","Value set of signed values between min and max.",null,null],[12,"min","","",34,null],[12,"max","","",34,null],[11,"contains","","",31,{"inputs":[{"name":"knownbits"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"scan_up","","",31,{"inputs":[{"name":"knownbits"},{"name":"u64"}],"output":{"name":"option"}}],[11,"scan_dn","","",31,{"inputs":[{"name":"knownbits"},{"name":"u64"}],"output":{"name":"option"}}],[11,"as_umultiple","","",31,{"inputs":[{"name":"knownbits"}],"output":{"name":"uintmultiple"}}],[11,"as_urange","","",31,{"inputs":[{"name":"knownbits"}],"output":{"name":"uintrange"}}],[11,"as_srange","","",31,{"inputs":[{"name":"knownbits"}],"output":{"name":"sintrange"}}],[11,"contains","","",33,{"inputs":[{"name":"uintrange"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"contains","","",34,{"inputs":[{"name":"sintrange"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"contains","","",32,{"inputs":[{"name":"uintmultiple"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"scan_up","","",32,{"inputs":[{"name":"uintmultiple"},{"name":"u64"}],"output":{"name":"option"}}],[11,"scan_dn","","",32,{"inputs":[{"name":"uintmultiple"},{"name":"u64"}],"output":{"name":"option"}}],[11,"as_knownbits","","",32,{"inputs":[{"name":"uintmultiple"}],"output":{"name":"knownbits"}}],[11,"as_urange","","",32,{"inputs":[{"name":"uintmultiple"}],"output":{"name":"uintrange"}}],[11,"as_srange","","",32,{"inputs":[{"name":"uintmultiple"}],"output":{"name":"sintrange"}}],[8,"ValueSet","","A value set. Some implementations introduce false positives when intersected or unified with each other.",null,null],[10,"contains","","",35,{"inputs":[{"name":"valueset"},{"name":"t"}],"output":{"name":"bool"}}],[8,"ScannableSet","","A value set over a totally ordered domain with methods to query the next greater or smaller value",null,null],[10,"scan_up","","Return Some(x) where x ≥ value and x ∈ self",36,{"inputs":[{"name":"scannableset"},{"name":"t"}],"output":{"name":"option"}}],[10,"scan_dn","","Return Some(x) where x ≤ value and x ∈ self",36,{"inputs":[{"name":"scannableset"},{"name":"t"}],"output":{"name":"option"}}],[11,"fmt","","",31,{"inputs":[{"name":"knownbits"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"knownbits"}],"output":{"name":"knownbits"}}],[11,"fmt","","",32,{"inputs":[{"name":"uintmultiple"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"uintmultiple"}],"output":{"name":"uintmultiple"}}],[11,"fmt","","",33,{"inputs":[{"name":"uintrange"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"uintrange"}],"output":{"name":"uintrange"}}],[11,"fmt","","",34,{"inputs":[{"name":"sintrange"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"sintrange"}],"output":{"name":"sintrange"}}],[11,"bitand","","",31,null],[11,"bitand","","",31,null],[11,"bitand","","",32,null],[11,"bitand","","",32,null],[11,"bitand","","",33,null],[11,"bitand","","",33,null],[11,"bitand","","",34,null],[11,"bitand","","",34,null],[11,"bitor","","",31,null],[11,"bitor","","",31,null],[11,"bitor","","",32,null],[11,"bitor","","",32,null],[11,"bitor","","",33,null],[11,"bitor","","",33,null],[11,"bitor","","",34,null],[11,"bitor","","",34,null],[0,"dom","radeco_lib::analysis","",null,null],[11,"index","collections::vec","",37,{"inputs":[{"name":"vec"},{"name":"internalindex"}],"output":{"name":"internalindex"}}],[0,"domtree","radeco_lib::analysis::dom","Implements Dominance frontier and dominance tree computation.",null,null],[3,"DFSVisitor","radeco_lib::analysis::dom::domtree","Depth first visitor that stores pre- and post- order traversal over a\nGraph.",null,null],[3,"DomInfo","","Wrapper struct that consolidates the Dom and PostDom information for a\nGraph.",null,null],[3,"DomTree","","Stores dominator information for a graph.",null,null],[11,"fmt","","",38,{"inputs":[{"name":"dfsvisitor"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"dfsvisitor"}],"output":{"name":"dfsvisitor"}}],[11,"new","","",38,{"inputs":[{"name":"dfsvisitor"}],"output":{"name":"dfsvisitor"}}],[11,"dfs","","",38,{"inputs":[{"name":"dfsvisitor"},{"name":"graph"},{"name":"nodeindex"}],"output":null}],[11,"post_order","","",38,{"inputs":[{"name":"dfsvisitor"}],"output":{"name":"vec"}}],[11,"pre_order","","",38,{"inputs":[{"name":"dfsvisitor"}],"output":{"name":"vec"}}],[11,"fmt","","",39,{"inputs":[{"name":"dominfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"dominfo"}],"output":{"name":"dominfo"}}],[11,"new","","",39,{"inputs":[{"name":"dominfo"}],"output":{"name":"dominfo"}}],[11,"build_dom_tree","","Constructs the DomTree and computes the dominance frontier for `g`.",39,{"inputs":[{"name":"dominfo"},{"name":"graph"},{"name":"nodeindex"}],"output":null}],[11,"build_postdom_tree","","Constructs the Post-DomTree and computes the postdominance frontier for `g`.",39,{"inputs":[{"name":"dominfo"},{"name":"graph"},{"name":"nodeindex"}],"output":null}],[11,"doms","","Returns all the dominators of the node with NodeIndex `i`.",39,{"inputs":[{"name":"dominfo"},{"name":"nodeindex"}],"output":{"name":"vec"}}],[11,"idom","","Returns the immediate dominator of the node with NodeIndex `i`.",39,{"inputs":[{"name":"dominfo"},{"name":"nodeindex"}],"output":{"name":"nodeindex"}}],[11,"dom_frontier","","Returns all nodes in the dominance frontier of `i`.",39,{"inputs":[{"name":"dominfo"},{"name":"nodeindex"}],"output":{"name":"hashset"}}],[11,"postdoms","","Returns all postdominators of `i`.",39,{"inputs":[{"name":"dominfo"},{"name":"nodeindex"}],"output":{"name":"vec"}}],[11,"ipostdom","","Returns the immediate postdominator of `i`.",39,{"inputs":[{"name":"dominfo"},{"name":"nodeindex"}],"output":{"name":"nodeindex"}}],[11,"postdom_frontier","","Returns all nodes in the postdominance frontier of `i`.",39,{"inputs":[{"name":"dominfo"},{"name":"nodeindex"}],"output":{"name":"hashset"}}],[11,"fmt","","",40,{"inputs":[{"name":"domtree"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"domtree"}],"output":{"name":"domtree"}}],[11,"graph","","",40,{"inputs":[{"name":"domtree"}],"output":{"name":"graph"}}],[11,"doms","","",40,{"inputs":[{"name":"domtree"},{"name":"nodeindex"}],"output":{"name":"vec"}}],[11,"idom","","",40,{"inputs":[{"name":"domtree"},{"name":"nodeindex"}],"output":{"name":"nodeindex"}}],[11,"build_dom_tree","","",40,{"inputs":[{"name":"domtree"},{"name":"graph"},{"name":"nodeindex"}],"output":{"name":"domtree"}}],[11,"compute_dominance_frontier","","",40,{"inputs":[{"name":"domtree"}],"output":null}],[11,"dom_frontier","","",40,{"inputs":[{"name":"domtree"},{"name":"nodeindex"}],"output":{"name":"hashset"}}],[11,"configure","","",40,{"inputs":[{"name":"domtree"}],"output":{"name":"string"}}],[11,"nodes","","",40,{"inputs":[{"name":"domtree"}],"output":{"name":"vec"}}],[11,"edges","","",40,{"inputs":[{"name":"domtree"}],"output":{"name":"vec"}}],[11,"get_node","","",40,{"inputs":[{"name":"domtree"},{"name":"usize"}],"output":{"name":"option"}}],[11,"edge_source","","",40,{"inputs":[{"name":"domtree"},{"name":"edge"}],"output":{"name":"usize"}}],[11,"edge_target","","",40,{"inputs":[{"name":"domtree"},{"name":"edge"}],"output":{"name":"usize"}}],[11,"edge_attrs","","",40,{"inputs":[{"name":"domtree"},{"name":"edge"}],"output":{"name":"dotattrblock"}}],[11,"node_attrs","","",40,{"inputs":[{"name":"domtree"},{"name":"nodeindex"}],"output":{"name":"dotattrblock"}}],[0,"constant_propagation","radeco_lib::analysis","",null,null],[0,"constant","radeco_lib::analysis::constant_propagation","Module that implements constant propagation on the SSA IR.",null,null],[3,"Analyzer","radeco_lib::analysis::constant_propagation::constant","",null,null],[4,"ExprVal","","",null,null],[13,"Top","","",41,null],[13,"Bottom","","",41,null],[13,"Const","","",41,null],[11,"eq","","",41,{"inputs":[{"name":"exprval"},{"name":"exprval"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"exprval"},{"name":"exprval"}],"output":{"name":"bool"}}],[11,"fmt","","",41,{"inputs":[{"name":"exprval"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"exprval"}],"output":{"name":"exprval"}}],[11,"new","","",42,{"inputs":[{"name":"analyzer"},{"name":"t"}],"output":{"name":"analyzer"}}],[11,"dump","","",42,{"inputs":[{"name":"analyzer"}],"output":null}],[11,"analyze","","",42,{"inputs":[{"name":"analyzer"}],"output":null}],[11,"emit_ssa","","",42,{"inputs":[{"name":"analyzer"}],"output":{"name":"t"}}],[0,"frontend","radeco_lib","Components concerned with getting input to SSA form.",null,null],[0,"structs","radeco_lib::frontend","Basic structs which are used for json encoding and decoding.",null,null],[3,"LOpInfo","radeco_lib::frontend::structs","",null,null],[12,"esil","","",43,null],[12,"offset","","",43,null],[12,"opcode","","",43,null],[12,"optype","","",43,null],[3,"LFunctionInfo","","",null,null],[12,"addr","","",44,null],[12,"name","","",44,null],[12,"ops","","",44,null],[3,"LRegInfo","","",null,null],[12,"alias_info","","",45,null],[12,"reg_info","","",45,null],[3,"LAliasInfo","","",null,null],[12,"reg","","",46,null],[12,"role","","",46,null],[12,"role_str","","",46,null],[3,"LRegProfile","","",null,null],[12,"name","","",47,null],[12,"offset","","",47,null],[12,"size","","",47,null],[12,"type_str","","",47,null],[3,"LFlagInfo","","",null,null],[12,"offset","","",48,null],[12,"name","","",48,null],[12,"size","","",48,null],[11,"clone","","",43,{"inputs":[{"name":"lopinfo"}],"output":{"name":"lopinfo"}}],[11,"fmt","","",43,{"inputs":[{"name":"lopinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",43,{"inputs":[{"name":"lopinfo"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"lfunctioninfo"}],"output":{"name":"lfunctioninfo"}}],[11,"fmt","","",44,{"inputs":[{"name":"lfunctioninfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",44,{"inputs":[{"name":"lfunctioninfo"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",44,{"inputs":[{"name":"lfunctioninfo"},{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"lreginfo"}],"output":{"name":"lreginfo"}}],[11,"fmt","","",45,{"inputs":[{"name":"lreginfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",45,{"inputs":[{"name":"lreginfo"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",45,{"inputs":[{"name":"lreginfo"},{"name":"__d"}],"output":{"name":"result"}}],[11,"default","","",46,{"inputs":[{"name":"laliasinfo"}],"output":{"name":"laliasinfo"}}],[11,"clone","","",46,{"inputs":[{"name":"laliasinfo"}],"output":{"name":"laliasinfo"}}],[11,"fmt","","",46,{"inputs":[{"name":"laliasinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",46,{"inputs":[{"name":"laliasinfo"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",46,{"inputs":[{"name":"laliasinfo"},{"name":"__d"}],"output":{"name":"result"}}],[11,"default","","",47,{"inputs":[{"name":"lregprofile"}],"output":{"name":"lregprofile"}}],[11,"clone","","",47,{"inputs":[{"name":"lregprofile"}],"output":{"name":"lregprofile"}}],[11,"fmt","","",47,{"inputs":[{"name":"lregprofile"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",47,{"inputs":[{"name":"lregprofile"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",47,{"inputs":[{"name":"lregprofile"},{"name":"__d"}],"output":{"name":"result"}}],[11,"default","","",48,{"inputs":[{"name":"lflaginfo"}],"output":{"name":"lflaginfo"}}],[11,"clone","","",48,{"inputs":[{"name":"lflaginfo"}],"output":{"name":"lflaginfo"}}],[11,"fmt","","",48,{"inputs":[{"name":"lflaginfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",48,{"inputs":[{"name":"lflaginfo"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",48,{"inputs":[{"name":"lflaginfo"},{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",43,{"inputs":[{"name":"lopinfo"},{"name":"d"}],"output":{"name":"result"}}],[0,"parser","radeco_lib::frontend","Implements parser to convert from ESIL to RadecoIR.",null,null],[3,"Parser","radeco_lib::frontend::parser","",null,null],[3,"ParserConfig","","",null,null],[4,"ParseError","","",null,null],[13,"InvalidEsil","","",49,null],[13,"InvalidMOperator","","",49,null],[13,"InsufficientOperands","","",49,null],[11,"fmt","","",49,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"parser"}],"output":{"name":"parser"}}],[11,"default","","",51,{"inputs":[{"name":"parserconfig"}],"output":{"name":"self"}}],[11,"new","","",50,{"inputs":[{"name":"parser"},{"name":"option"}],"output":{"name":"parser"}}],[11,"set_register_profile","","",50,{"inputs":[{"name":"parser"},{"name":"lreginfo"}],"output":null}],[11,"set_flags","","",50,{"inputs":[{"name":"parser"},{"name":"vec"}],"output":null}],[11,"new_mreg_info","","",50,{"inputs":[{"name":"parser"},{"name":"lregprofile"}],"output":{"name":"mreginfo"}}],[11,"parse_opinfo","","",50,{"inputs":[{"name":"parser"},{"name":"lopinfo"}],"output":{"name":"result"}}],[11,"parse_str","","",50,{"inputs":[{"name":"parser"},{"name":"str"}],"output":{"name":"result"}}],[11,"emit_insts","","Emit-instructions converts certain compound instructions to simpler instructions.\nFor example, the sequence of instructions,\n```none\nif zf            (OpIf)\n  jump addr      (OpJmp)\n```\nis converted to a single conditional jump as,\n```none\nif zf jump addr  (OpCJmp)\n```",50,{"inputs":[{"name":"parser"}],"output":{"name":"vec"}}],[0,"r2","radeco_lib::frontend","Module that provides interaction with radare2.\nUses r2pipe.",null,null],[3,"R2","radeco_lib::frontend::r2","",null,null],[8,"Search","","",null,null],[10,"get_values","","",52,null],[11,"get_values","rustc_serialize::json","",53,null],[11,"new","radeco_lib::frontend::r2","",54,{"inputs":[{"name":"r2"},{"name":"str"}],"output":{"name":"r2"}}],[11,"from","","",54,{"inputs":[{"name":"r2"},{"name":"r2pipe"}],"output":{"name":"r2"}}],[11,"init","","",54,{"inputs":[{"name":"r2"}],"output":null}],[11,"close","","",54,{"inputs":[{"name":"r2"}],"output":null}],[11,"send","","",54,{"inputs":[{"name":"r2"},{"name":"str"}],"output":null}],[11,"recv","","",54,{"inputs":[{"name":"r2"}],"output":{"name":"string"}}],[11,"recv_json","","",54,{"inputs":[{"name":"r2"}],"output":{"name":"json"}}],[11,"flush","","",54,{"inputs":[{"name":"r2"}],"output":null}],[11,"analyze","","",54,{"inputs":[{"name":"r2"}],"output":null}],[11,"get_function","","",54,{"inputs":[{"name":"r2"},{"name":"str"}],"output":{"name":"decoderesult"}}],[11,"get_insts","","",54,{"inputs":[{"name":"r2"},{"name":"option"},{"name":"option"}],"output":{"name":"decoderesult"}}],[11,"get_reg_info","","",54,{"inputs":[{"name":"r2"}],"output":{"name":"decoderesult"}}],[11,"get_flag_info","","",54,{"inputs":[{"name":"r2"}],"output":{"name":"decoderesult"}}],[11,"get_fn_list","","",54,{"inputs":[{"name":"r2"}],"output":{"name":"json"}}],[0,"esilssa","radeco_lib::frontend","Converts the from ESIL/CFG representation to SSA.",null,null],[3,"SSAConstruction","radeco_lib::frontend::esilssa","",null,null],[12,"phiplacer","","",55,null],[12,"regfile","","",55,null],[12,"temps","","",55,null],[6,"VarId","","",null,null],[11,"new","","",55,{"inputs":[{"name":"ssaconstruction"},{"name":"t"},{"name":"lreginfo"}],"output":{"name":"ssaconstruction"}}],[11,"run","","",55,{"inputs":[{"name":"ssaconstruction"},{"name":"cfg"}],"output":null}],[0,"backend","radeco_lib","Components converting SSA to more high level representations.",null,null],[0,"scf","radeco_lib::backend","",null,null],[4,"LoopType","radeco_lib::backend::scf","",null,null],[13,"While","","",56,null],[13,"DoWhile","","",56,null],[13,"ForEver","","",56,null],[4,"AST","","",null,null],[13,"Unit","","",57,null],[13,"Seq","","",57,null],[13,"Cond","","",57,null],[13,"Loop","","",57,null],[13,"Switch","","",57,null],[6,"AST_","","",null,null],[6,"RUnit","","",null,null],[6,"RCond","","",null,null],[6,"RExpr","","",null,null],[0,"utils","radeco_lib","Module implements Pipeline and Runner structs to make radeco-lib easier to use.",null,null],[3,"State","radeco_lib::utils","",null,null],[12,"reg_info","","",58,null],[12,"pipeout","","",58,null],[3,"Runner","","",null,null],[12,"state","","",59,null],[4,"Analysis","","",null,null],[13,"ConstProp","","",60,null],[4,"Pipeline","","",null,null],[13,"ReadFromR2","","",61,null],[13,"ParseEsil","","",61,null],[13,"CFG","","",61,null],[13,"SSA","","",61,null],[13,"AnalyzeSSA","","",61,null],[13,"DCE","","",61,null],[13,"Verify","","",61,null],[13,"CWriter","","",61,null],[4,"Pipeout","","",null,null],[13,"Esil","","",62,null],[13,"LOpInfo","","",62,null],[13,"Instructions","","",62,null],[12,"i","radeco_lib::utils::Pipeout","",62,null],[13,"CFG","radeco_lib::utils","",62,null],[12,"cfg","radeco_lib::utils::Pipeout","",62,null],[13,"SSA","radeco_lib::utils","",62,null],[12,"ssa","radeco_lib::utils::Pipeout","",62,null],[11,"fmt","radeco_lib::utils","",60,{"inputs":[{"name":"analysis"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",60,{"inputs":[{"name":"analysis"}],"output":{"name":"analysis"}}],[11,"fmt","","",61,{"inputs":[{"name":"pipeline"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",61,{"inputs":[{"name":"pipeline"}],"output":{"name":"pipeline"}}],[11,"clone","","",62,{"inputs":[{"name":"pipeout"}],"output":{"name":"pipeout"}}],[11,"new","","",59,{"inputs":[{"name":"runner"},{"name":"string"},{"name":"option"},{"name":"option"},{"name":"bool"},{"name":"vec"}],"output":{"name":"runner"}}],[11,"run","","",59,{"inputs":[{"name":"runner"}],"output":null}],[11,"dump","","",59,{"inputs":[{"name":"runner"}],"output":null}],[11,"fmt","radeco_lib::middle::ir","",14,null],[11,"fmt","","",10,null],[11,"fmt","","",11,null]],"paths":[[3,"BasicBlock"],[3,"EdgeData"],[3,"CFG"],[4,"NodeData"],[4,"EdgeType"],[3,"Direction"],[4,"DotAttrBlock"],[8,"GraphDot"],[3,"MAddr"],[3,"MRegInfo"],[3,"MVal"],[3,"MInst"],[4,"MArity"],[4,"MValType"],[4,"MOpcode"],[3,"PhiPlacer"],[3,"SubRegisterFile"],[8,"CFG"],[8,"CFGMod"],[3,"BBInfo"],[3,"NodeData"],[4,"ValueType"],[4,"NodeType"],[8,"SSA"],[8,"SSAMod"],[3,"SSAStorage"],[4,"NodeData"],[4,"EdgeData"],[8,"Verify"],[8,"VerifiedAdd"],[4,"SSAErr"],[3,"KnownBits"],[3,"UIntMultiple"],[3,"UIntRange"],[3,"SIntRange"],[8,"ValueSet"],[8,"ScannableSet"],[3,"Vec"],[3,"DFSVisitor"],[3,"DomInfo"],[3,"DomTree"],[4,"ExprVal"],[3,"Analyzer"],[3,"LOpInfo"],[3,"LFunctionInfo"],[3,"LRegInfo"],[3,"LAliasInfo"],[3,"LRegProfile"],[3,"LFlagInfo"],[4,"ParseError"],[3,"Parser"],[3,"ParserConfig"],[8,"Search"],[4,"Json"],[3,"R2"],[3,"SSAConstruction"],[4,"LoopType"],[4,"AST"],[3,"State"],[3,"Runner"],[4,"Analysis"],[4,"Pipeline"],[4,"Pipeout"]]};
initSearch(searchIndex);
